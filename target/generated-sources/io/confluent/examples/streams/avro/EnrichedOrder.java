/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package io.confluent.examples.streams.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class EnrichedOrder extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EnrichedOrder\",\"namespace\":\"io.confluent.examples.streams.avro\",\"fields\":[{\"name\":\"product\",\"type\":{\"type\":\"record\",\"name\":\"Product\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"supplier_name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"customer\",\"type\":{\"type\":\"record\",\"name\":\"Customer\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"gender\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"region\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"order\",\"type\":{\"type\":\"record\",\"name\":\"Order\",\"fields\":[{\"name\":\"customer_id\",\"type\":\"long\"},{\"name\":\"product_id\",\"type\":\"long\"},{\"name\":\"time_order_placed_at\",\"type\":\"long\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public io.confluent.examples.streams.avro.Product product;
  @Deprecated public io.confluent.examples.streams.avro.Customer customer;
  @Deprecated public io.confluent.examples.streams.avro.Order order;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public EnrichedOrder() {}

  /**
   * All-args constructor.
   */
  public EnrichedOrder(io.confluent.examples.streams.avro.Product product, io.confluent.examples.streams.avro.Customer customer, io.confluent.examples.streams.avro.Order order) {
    this.product = product;
    this.customer = customer;
    this.order = order;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return product;
    case 1: return customer;
    case 2: return order;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: product = (io.confluent.examples.streams.avro.Product)value$; break;
    case 1: customer = (io.confluent.examples.streams.avro.Customer)value$; break;
    case 2: order = (io.confluent.examples.streams.avro.Order)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'product' field.
   */
  public io.confluent.examples.streams.avro.Product getProduct() {
    return product;
  }

  /**
   * Sets the value of the 'product' field.
   * @param value the value to set.
   */
  public void setProduct(io.confluent.examples.streams.avro.Product value) {
    this.product = value;
  }

  /**
   * Gets the value of the 'customer' field.
   */
  public io.confluent.examples.streams.avro.Customer getCustomer() {
    return customer;
  }

  /**
   * Sets the value of the 'customer' field.
   * @param value the value to set.
   */
  public void setCustomer(io.confluent.examples.streams.avro.Customer value) {
    this.customer = value;
  }

  /**
   * Gets the value of the 'order' field.
   */
  public io.confluent.examples.streams.avro.Order getOrder() {
    return order;
  }

  /**
   * Sets the value of the 'order' field.
   * @param value the value to set.
   */
  public void setOrder(io.confluent.examples.streams.avro.Order value) {
    this.order = value;
  }

  /** Creates a new EnrichedOrder RecordBuilder */
  public static io.confluent.examples.streams.avro.EnrichedOrder.Builder newBuilder() {
    return new io.confluent.examples.streams.avro.EnrichedOrder.Builder();
  }
  
  /** Creates a new EnrichedOrder RecordBuilder by copying an existing Builder */
  public static io.confluent.examples.streams.avro.EnrichedOrder.Builder newBuilder(io.confluent.examples.streams.avro.EnrichedOrder.Builder other) {
    return new io.confluent.examples.streams.avro.EnrichedOrder.Builder(other);
  }
  
  /** Creates a new EnrichedOrder RecordBuilder by copying an existing EnrichedOrder instance */
  public static io.confluent.examples.streams.avro.EnrichedOrder.Builder newBuilder(io.confluent.examples.streams.avro.EnrichedOrder other) {
    return new io.confluent.examples.streams.avro.EnrichedOrder.Builder(other);
  }
  
  /**
   * RecordBuilder for EnrichedOrder instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EnrichedOrder>
    implements org.apache.avro.data.RecordBuilder<EnrichedOrder> {

    private io.confluent.examples.streams.avro.Product product;
    private io.confluent.examples.streams.avro.Customer customer;
    private io.confluent.examples.streams.avro.Order order;

    /** Creates a new Builder */
    private Builder() {
      super(io.confluent.examples.streams.avro.EnrichedOrder.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(io.confluent.examples.streams.avro.EnrichedOrder.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.product)) {
        this.product = data().deepCopy(fields()[0].schema(), other.product);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.customer)) {
        this.customer = data().deepCopy(fields()[1].schema(), other.customer);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.order)) {
        this.order = data().deepCopy(fields()[2].schema(), other.order);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing EnrichedOrder instance */
    private Builder(io.confluent.examples.streams.avro.EnrichedOrder other) {
            super(io.confluent.examples.streams.avro.EnrichedOrder.SCHEMA$);
      if (isValidValue(fields()[0], other.product)) {
        this.product = data().deepCopy(fields()[0].schema(), other.product);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.customer)) {
        this.customer = data().deepCopy(fields()[1].schema(), other.customer);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.order)) {
        this.order = data().deepCopy(fields()[2].schema(), other.order);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'product' field */
    public io.confluent.examples.streams.avro.Product getProduct() {
      return product;
    }
    
    /** Sets the value of the 'product' field */
    public io.confluent.examples.streams.avro.EnrichedOrder.Builder setProduct(io.confluent.examples.streams.avro.Product value) {
      validate(fields()[0], value);
      this.product = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'product' field has been set */
    public boolean hasProduct() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'product' field */
    public io.confluent.examples.streams.avro.EnrichedOrder.Builder clearProduct() {
      product = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'customer' field */
    public io.confluent.examples.streams.avro.Customer getCustomer() {
      return customer;
    }
    
    /** Sets the value of the 'customer' field */
    public io.confluent.examples.streams.avro.EnrichedOrder.Builder setCustomer(io.confluent.examples.streams.avro.Customer value) {
      validate(fields()[1], value);
      this.customer = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'customer' field has been set */
    public boolean hasCustomer() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'customer' field */
    public io.confluent.examples.streams.avro.EnrichedOrder.Builder clearCustomer() {
      customer = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'order' field */
    public io.confluent.examples.streams.avro.Order getOrder() {
      return order;
    }
    
    /** Sets the value of the 'order' field */
    public io.confluent.examples.streams.avro.EnrichedOrder.Builder setOrder(io.confluent.examples.streams.avro.Order value) {
      validate(fields()[2], value);
      this.order = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'order' field has been set */
    public boolean hasOrder() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'order' field */
    public io.confluent.examples.streams.avro.EnrichedOrder.Builder clearOrder() {
      order = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public EnrichedOrder build() {
      try {
        EnrichedOrder record = new EnrichedOrder();
        record.product = fieldSetFlags()[0] ? this.product : (io.confluent.examples.streams.avro.Product) defaultValue(fields()[0]);
        record.customer = fieldSetFlags()[1] ? this.customer : (io.confluent.examples.streams.avro.Customer) defaultValue(fields()[1]);
        record.order = fieldSetFlags()[2] ? this.order : (io.confluent.examples.streams.avro.Order) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
